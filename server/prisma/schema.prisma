generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                    @id @default(autoincrement())
  clerkId                   String                 @unique
  firstName                 String
  lastName                  String
  type                      UserType
  userGroupAssociation      UserGroupAssociation[]
  theoreticalEvent          TheoreticalEvent[]
  studentPracticalEvents    PracticalEvent[]       @relation("practical_student_event")
  instructorPracticalEvents PracticalEvent[]       @relation("practical_instructor_event")
}

enum UserType {
  Student
  Instructor
}

model UserGroupAssociation {
  id      Int   @id @default(autoincrement())
  userId  Int
  user    User  @relation(fields: [userId], references: [id])
  groupId Int
  group   Group @relation(fields: [groupId], references: [id])
}

model Classroom {
  id               Int                @id @default(autoincrement())
  name             String
  theoreticalEvent TheoreticalEvent[]
}

model Group {
  id                   Int                    @id @default(autoincrement())
  name                 String
  theoreticalEvent     TheoreticalEvent[]
  UserGroupAssociation UserGroupAssociation[]
}

model TheoreticalEvent {
  id           String    @id @default(uuid()) @map("_id")
  startsAt     DateTime
  endsAt       DateTime
  classroom    Classroom @relation(fields: [classroomId], references: [id])
  classroomId  Int
  group        Group     @relation(fields: [groupId], references: [id])
  groupId      Int
  instructor   User      @relation(fields: [instructorId], references: [id])
  instructorId Int
}

model PracticalEvent {
  id           String   @id @default(uuid()) @map("_id")
  startsAt     DateTime
  endsAt       DateTime
  instructor   User     @relation("practical_instructor_event", fields: [instructorId], references: [id])
  instructorId Int
  student      User     @relation("practical_student_event", fields: [studentId], references: [id])
  studentId    Int
}
